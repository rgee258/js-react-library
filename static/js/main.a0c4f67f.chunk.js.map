{"version":3,"sources":["components/Header/Header.js","components/BookForm/BookForm.js","components/BookList/BookList.js","components/LibraryContainer/LibraryContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","BookForm","handleInput","event","name","target","setState","value","state","title","author","pages","readStatus","initialState","toggleForm","bind","hideForm","handleSubmit","resetForm","bookForm","document","querySelector","classList","contains","remove","this","add","preventDefault","newBook","id","onClick","onSubmit","type","onChange","required","min","max","checked","React","Component","BookList","bookIds","map","key","titles","authors","updateReadStatus","deleteBook","LibraryContainer","bookData","prevState","concat","nextId","selectedId","newTitles","newAuthors","newPages","newReadStatuses","filter","setTimeout","displayState","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0c4f67f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Header.css';\n\nconst Header = (props) => {\n  return (\n    <div>\n      <h1 className=\"main-header\">\n        {props.text}\n      </h1>\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  text: PropTypes.string\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './BookForm.css';\n\nclass BookForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      author: \"\",\n      pages: 1,\n      readStatus: \"Read\"\n    };\n    this.initialState = this.state;\n    this.toggleForm = this.toggleForm.bind(this);\n    this.hideForm = this.hideForm.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.resetForm = this.resetForm.bind(this);\n  }\n\n  toggleForm() {\n    const bookForm = document.querySelector('.form-wrapper');\n    if (bookForm.classList.contains('hide')) {\n      bookForm.classList.remove('hide');\n    } else {\n      this.hideForm();\n    }\n  }\n\n  hideForm() {\n    const bookForm = document.querySelector('.form-wrapper');\n    if (!bookForm.classList.contains('hide')) {\n      bookForm.classList.add('hide');\n    }\n  }\n\n  resetForm() {\n    // Reset the state back using the initialState from the constructor\n    this.setState(this.initialState);\n  }\n\n  handleInput = (event) => {\n    // Get the name of the input that is the same as in state\n    const name = event.target.name;\n\n    this.setState({\n      // Update the state according to the associated name and event value\n      [name]: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.newBook(this.state);\n    this.hideForm();\n    this.resetForm();\n  }\n\n  render() {\n    return (\n      <div className=\"form-container\">\n        <button \n          id=\"toggle-form\"\n          onClick={this.toggleForm}\n        >Add Book</button>\n        <div className=\"form-wrapper hide\">\n          <form id=\"book-form\" onSubmit={this.handleSubmit}>\n            <label>Title</label>\n            <input type=\"text\" id=\"title\" name=\"title\" value={this.state.title} onChange={this.handleInput} required />\n            <label>Author</label>\n            <input type=\"text\" id=\"author\" name=\"author\" value={this.state.author} onChange={this.handleInput} required />\n            <label>Pages</label>\n            <input type=\"number\" id=\"pages\" name=\"pages\" min=\"1\" max=\"999999\" value={this.state.pages} onChange={this.handleInput} required />\n            <label>Reading Status</label>\n            <div className=\"radio-btns\">\n              <input type=\"radio\" id=\"read\" name=\"readStatus\" value=\"Read\" checked={this.state.readStatus === \"Read\"} onChange={this.handleInput} />\n              <span className=\"read-radio-text\">Read</span>\n              <input type=\"radio\" id=\"unread\" name=\"readStatus\" value=\"Unread\" checked={this.state.readStatus === \"Unread\"} onChange={this.handleInput} />\n              <span className=\"unread-radio-text\">Unread</span>\n            </div>\n            <input type=\"submit\" id=\"submit\" className=\"form-submit\" value=\"Add\" />\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nBookForm.propTypes = {\n  newBook: PropTypes.func.isRequired\n}\n\nexport default BookForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './BookList.css'\n\nclass BookList extends React.Component {\n\n  render() {\n    return (\n      <div className=\"book-list\">\n        <div className=\"list-header\">\n          <div className=\"header-title\">Title</div>\n          <div className=\"header-author\">Author</div>\n          <div>Pages</div>\n          <div>Read Status</div>\n          <div>Update Status</div>\n          <div>Delete</div>\n        </div>\n        {this.props.bookIds.map((id) =>\n          <div key={id} className=\"book\">\n            <div className=\"title\">{this.props.titles[id]}</div>\n            <div className=\"author\">{this.props.authors[id]}</div>\n            <div className=\"pages\">{this.props.pages[id]}</div>\n            <div className=\"read-status\">{this.props.readStatus[id]}</div>\n            {/* Here we need the arrow function to prevent infinite looping\n                if we were to call only updateReadStatus(id) */}\n            <div className=\"update-btn\"><button onClick={() => this.props.updateReadStatus(id)}>Update</button></div>\n            {/* TODO Button for deleting book */}\n            <div className=\"delete-btn\"><button onClick={() => this.props.deleteBook(id)}>Delete</button></div>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nBookList.propTypes = {\n  bookIds: PropTypes.array.isRequired,\n  titles: PropTypes.object.isRequired,\n  authors: PropTypes.object.isRequired,\n  pages: PropTypes.object.isRequired,\n  readStatus: PropTypes.object.isRequired,\n  updateReadStatus: PropTypes.func.isRequired,\n  deleteBook: PropTypes.func.isRequired\n}\n\nexport default BookList;\n","import React from 'react';\n\nimport './LibraryContainer.css';\nimport Header from '../Header/Header.js';\nimport BookForm from '../BookForm/BookForm.js';\nimport BookList from '../BookList/BookList.js';\n\nclass LibraryContainer extends React.Component {\n  // Breaking down collections in state\n  // https://medium.com/@srph/react-maintaining-state-for-collections-80a1d9615886\n  constructor(props) {\n    super(props);\n    this.state = {\n      nextId: 1,\n      bookIds: [],\n      titles: {},\n      authors: {},\n      pages: {},\n      readStatus: {}\n    }\n    this.newBook = this.newBook.bind(this);\n    this.updateReadStatus = this.updateReadStatus.bind(this);\n    this.deleteBook = this.deleteBook.bind(this);\n    this.displayState = this.displayState.bind(this);\n  }\n\n  newBook = (bookData) => {\n    // Here we use prevState to retain the values already in state\n    //  with the spread operator\n    // See: https://stackoverflow.com/questions/43638938/updating-an-object-with-setstate-in-react\n    this.setState(prevState => ({ \n      bookIds: this.state.bookIds.concat(this.state.nextId),\n      titles: {\n        ...prevState.titles,\n        [this.state.nextId]: bookData.title\n      },\n      authors: {\n        ...prevState.authors,\n        [this.state.nextId]: bookData.author\n      },\n      pages: {\n        ...prevState.pages,\n        [this.state.nextId]: bookData.pages\n      },\n      readStatus: {\n        ...prevState.readStatus,\n        [this.state.nextId]: bookData.readStatus\n      },\n      nextId: this.state.nextId + 1,\n    }));\n  }\n\n  updateReadStatus = (selectedId) => {\n    const status = this.state.readStatus[selectedId];\n\n    if (status === \"Read\") {\n      this.setState(prevState => ({ \n        readStatus: { ...prevState.readStatus, [selectedId]: \"Unread\" } \n      }));\n    } else {\n      this.setState(prevState => ({ \n        readStatus: { ...prevState.readStatus, [selectedId]: \"Read\" } \n      }));\n    }\n  }\n\n  deleteBook = (selectedId) => {\n    // Here we use object destructuring with the rest operators to separate our\n    //  property with selectedId from the existing objects in state\n    // See the following and the comments for handling dynamic keys\n    // https://codeburst.io/use-es2015-object-rest-operator-to-omit-properties-38a3ecffe90\n    const { [selectedId]: removedTitle, ...newTitles } = this.state.titles;\n    const { [selectedId]: removedAuthor, ...newAuthors } = this.state.authors;\n    const { [selectedId]: removedPages, ...newPages } = this.state.pages;\n    const { [selectedId]: removedReadStatus, ...newReadStatuses } = this.state.readStatus;\n\n    this.setState(prevState => ({\n      // Use the vanilla filter method on arrays to remove them from state\n      // https://www.robinwieruch.de/react-state-array-add-update-remove\n      bookIds: prevState.bookIds.filter(id => id !== selectedId),\n      titles: newTitles,\n      authors: newAuthors,\n      pages: newPages,\n      readStatus: newReadStatuses\n    }));\n\n    setTimeout(this.displayState, 3000);\n  }\n\n  displayState = () => { \n    console.log(\"Displaying...\");\n    console.log(this.state); \n  }\n\n  render() {\n    return (\n      <div>\n        <Header text=\"React Library\"/>\n        <BookForm newBook={this.newBook}/>\n        <BookList \n          bookIds={this.state.bookIds} \n          titles={this.state.titles} \n          authors={this.state.authors} \n          pages={this.state.pages} \n          readStatus={this.state.readStatus} \n          updateReadStatus={this.updateReadStatus}\n          deleteBook = {this.deleteBook}/>\n      </div>\n    );\n  }\n}\n\nexport default LibraryContainer;\n","import React from 'react';\nimport './App.css';\nimport LibraryContainer from './components/LibraryContainer/LibraryContainer.js';\n\nfunction App() {\n  return (\n    <LibraryContainer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}